events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Upstream configuration for the Deno WebSocket cluster
    upstream deno_websocket_cluster {
        # Enable sticky sessions based on client IP
        ip_hash;
        
        # Define server instances
        server hypha-server-1:8080 max_fails=3 fail_timeout=30s;
        server hypha-server-2:8080 max_fails=3 fail_timeout=30s;
        server hypha-server-3:8080 max_fails=3 fail_timeout=30s;
    }
    
    # Health check upstream
    upstream deno_health_check {
        server hypha-server-1:8080;
        server hypha-server-2:8080;
        server hypha-server-3:8080;
    }
    
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        
        # Health check endpoint
        location /health {
            proxy_pass http://deno_health_check/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Don't use sticky sessions for health checks
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        # WebSocket endpoint
        location /ws {
            proxy_pass http://deno_websocket_cluster;
            
            # WebSocket specific headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for WebSocket connections
            proxy_connect_timeout 7s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings
            proxy_buffering off;
            proxy_request_buffering off;
        }
        
        # HTTP service endpoints (REST API)
        location / {
            proxy_pass http://deno_websocket_cluster;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
} 